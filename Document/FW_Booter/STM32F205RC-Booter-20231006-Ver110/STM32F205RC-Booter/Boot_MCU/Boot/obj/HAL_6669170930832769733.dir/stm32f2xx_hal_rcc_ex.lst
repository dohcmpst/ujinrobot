###############################################################################
#
# IAR ANSI C/C++ Compiler V9.40.1.364/W64 for ARM         06/Oct/2023  13:39:18
# Copyright 1999-2023 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\lib\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_rcc_ex.c
#    Command line      =
#        -f
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\HAL_6669170930832769733.dir\stm32f2xx_hal_rcc_ex.o.rsp
#        (R:\STM32F205RC-Booter\Boot_MCU\Boot\lib\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_rcc_ex.c
#        -D USE_HAL_DRIVER -D USE_FULL_LL_DRIVER -D STM32F205xx -lcN
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\HAL_6669170930832769733.dir -o
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\HAL_6669170930832769733.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.4\arm\inc\c\DLib_Config_Normal.h" -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\CMSIS\Device\ST\STM32F2xx\Include\
#        -I R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\CMSIS\Include\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\fatfs\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\STM32F2xx_HAL_Driver\Inc\
#        -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\STM32F2xx_HAL_Driver\Inc\Legacy\
#        -I R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\..\..\Source\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\..\..\Source\ARMCM3_STM32F2\
#        -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\..\..\Source\third_party\fatfs\src\
#        -Ol) --dependencies=n
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\HAL_6669170930832769733.dir\stm32f2xx_hal_rcc_ex.o.iar_deps
#    Locale            =  C
#    List file         =
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\HAL_6669170930832769733.dir\stm32f2xx_hal_rcc_ex.lst
#    Object file       =
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\HAL_6669170930832769733.dir\stm32f2xx_hal_rcc_ex.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

R:\STM32F205RC-Booter\Boot_MCU\Boot\lib\STM32F2xx_HAL_Driver\Src\stm32f2xx_hal_rcc_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f2xx_hal_rcc_ex.c
      4            * @author  MCD Application Team
      5            * @brief   Extension RCC HAL module driver.
      6            *          This file provides firmware functions to manage the following 
      7            *          functionalities RCC extension peripheral:
      8            *           + Extended Peripheral Control functions
      9            *  
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
     14            * All rights reserved.</center></h2>
     15            *
     16            * This software component is licensed by ST under BSD 3-Clause license,
     17            * the "License"; You may not use this file except in compliance with the
     18            * License. You may obtain a copy of the License at:
     19            *                        opensource.org/licenses/BSD-3-Clause
     20            *
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm32f2xx_hal.h"
     26          
     27          /** @addtogroup STM32F2xx_HAL_Driver
     28            * @{
     29            */
     30          
     31          /** @defgroup RCCEx RCCEx
     32            * @brief RCCEx HAL module driver
     33            * @{
     34            */
     35          
     36          #ifdef HAL_RCC_MODULE_ENABLED
     37          
     38          /* Private typedef -----------------------------------------------------------*/
     39          /* Private define ------------------------------------------------------------*/
     40          /** @addtogroup RCCEx_Private_Constants
     41            * @{
     42            */
     43          /**
     44            * @}
     45            */ 
     46          /* Private macro -------------------------------------------------------------*/
     47          /* Private variables ---------------------------------------------------------*/
     48          /* Private function prototypes -----------------------------------------------*/
     49          /* Private functions ---------------------------------------------------------*/
     50          /** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
     51            *  @{
     52            */
     53          
     54          /** @defgroup RCCEx_Exported_Functions_Group1 Extended Peripheral Control functions 
     55           *  @brief  Extended Peripheral Control functions  
     56           *
     57          @verbatim   
     58           ===============================================================================
     59                          ##### Extended Peripheral Control functions  #####
     60           ===============================================================================
     61              [..]
     62              This subsection provides a set of functions allowing to control the RCC Clocks 
     63              frequencies.
     64              [..] 
     65              (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
     66                  select the RTC clock source; in this case the Backup domain will be reset in  
     67                  order to modify the RTC Clock source, as consequence RTC registers (including 
     68                  the backup registers) and RCC_BDCR register are set to their reset values.
     69                
     70          @endverbatim
     71            * @{
     72            */
     73          
     74          /**
     75            * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters in the
     76            *         RCC_PeriphCLKInitTypeDef.
     77            * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
     78            *         contains the configuration information for the Extended Peripherals clocks(I2S and RTC clocks).
     79            *         
     80            * @note   A caution to be taken when HAL_RCCEx_PeriphCLKConfig() is used to select RTC clock selection, in this case 
     81            *         the Reset of Backup domain will be applied in order to modify the RTC Clock source as consequence all backup 
     82            *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
     83            *              
     84            * @retval HAL status
     85            */
     86          HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
     87          {
     88            uint32_t tickstart = 0U;
     89            uint32_t tmpreg1 = 0U;
     90              
     91            /* Check the parameters */
     92            assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
     93            
     94            /*---------------------------- I2S configuration ---------------------------*/
     95            if(((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))|| \
     96               (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
     97            {
     98              /* check for Parameters */
     99              assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    100              assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    101                
    102              /* Disable the PLLI2S */
    103              __HAL_RCC_PLLI2S_DISABLE();
    104              /* Get tick */
    105              tickstart = HAL_GetTick();
    106              /* Wait till PLLI2S is disabled */
    107              while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
    108              {
    109                if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
    110                {
    111                  /* return in case of Timeout detected */
    112                  return HAL_TIMEOUT;
    113                } 
    114              }
    115              /* Configure the PLLI2S division factors */
    116              /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    117              /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    118              __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
    119              
    120              /* Enable the PLLI2S */
    121              __HAL_RCC_PLLI2S_ENABLE();
    122              /* Get tick */
    123              tickstart = HAL_GetTick();
    124              /* Wait till PLLI2S is ready */
    125              while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
    126              {
    127                if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
    128                {
    129                  /* return in case of Timeout detected */
    130                  return HAL_TIMEOUT;
    131                }
    132              }
    133            }
    134            /*--------------------------------------------------------------------------*/
    135            
    136            /*---------------------------- RTC configuration ---------------------------*/
    137            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
    138            {
    139              /* Check for RTC Parameters used to output RTCCLK */
    140              assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    141              
    142              /* Enable Power Clock*/
    143              __HAL_RCC_PWR_CLK_ENABLE();
    144              
    145              /* Enable write access to Backup domain */
    146              PWR->CR |= PWR_CR_DBP;
    147              
    148              /* Get tick */
    149              tickstart = HAL_GetTick();
    150              
    151              while((PWR->CR & PWR_CR_DBP) == RESET)
    152              {
    153                if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
    154                {
    155                  return HAL_TIMEOUT;
    156                }
    157              }
    158              /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    159              tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    160              if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    161              {
    162                /* Store the content of BDCR register before the reset of Backup Domain */
    163                tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
    164                /* RTC Clock selection can be changed only if the Backup Domain is reset */
    165                __HAL_RCC_BACKUPRESET_FORCE();
    166                __HAL_RCC_BACKUPRESET_RELEASE();
    167                /* Restore the Content of BDCR register */
    168                RCC->BDCR = tmpreg1;
    169          
    170                /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
    171                if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
    172                {
    173                  /* Get tick */
    174                  tickstart = HAL_GetTick();
    175                  
    176                  /* Wait till LSE is ready */
    177                  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    178                  {
    179                    if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    180                    {
    181                      return HAL_TIMEOUT;
    182                    }
    183                  }
    184                }
    185              }
    186              __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    187            }
    188            /*--------------------------------------------------------------------------*/
    189          
    190            return HAL_OK;
    191          }
    192          
    193          /**
    194            * @brief  Configures the RCC_OscInitStruct according to the internal 
    195            * RCC configuration registers.
    196            * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that 
    197            * will be configured.
    198            * @retval None
    199            */
    200          void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
    201          {
    202            uint32_t tempreg;
    203            
    204            /* Set all possible values for the extended clock type parameter------------*/
    205            PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
    206            
    207            /* Get the PLLI2S Clock configuration --------------------------------------*/
    208            PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
    209            PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
    210            
    211            /* Get the RTC Clock configuration -----------------------------------------------*/
    212            tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
    213            PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
    214            
    215          }
    216          /**
    217            * @}
    218            */
    219          
    220          /**
    221            * @}
    222            */
    223          
    224          #endif /* HAL_RCC_MODULE_ENABLED */
    225          /**
    226            * @}
    227            */
    228          
    229          /**
    230            * @}
    231            */
    232          
    233          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_RCCEx_GetPeriphCLKConfig
      24   HAL_RCCEx_PeriphCLKConfig
        24   -> HAL_GetTick


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
      46  HAL_RCCEx_GetPeriphCLKConfig
     298  HAL_RCCEx_PeriphCLKConfig

 
 380 bytes in section .text
 
 380 bytes of CODE memory

Errors: none
Warnings: none
