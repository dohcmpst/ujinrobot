###############################################################################
#
# IAR ANSI C/C++ Compiler V9.40.1.364/W64 for ARM         06/Oct/2023  13:39:20
# Copyright 1999-2023 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  R:\STM32F205RC-Booter\Source\net.c
#    Command line      =
#        -f
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\Source_15812263154798067462.dir\net.o.rsp
#        (R:\STM32F205RC-Booter\Source\net.c -D USE_HAL_DRIVER -D
#        USE_FULL_LL_DRIVER -D STM32F205xx -lcN
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\Source_15812263154798067462.dir
#        -o
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\Source_15812263154798067462.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.4\arm\inc\c\DLib_Config_Normal.h" -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\CMSIS\Device\ST\STM32F2xx\Include\
#        -I R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\CMSIS\Include\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\fatfs\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\STM32F2xx_HAL_Driver\Inc\
#        -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\lib\STM32F2xx_HAL_Driver\Inc\Legacy\
#        -I R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\..\..\Source\ -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\..\..\Source\ARMCM3_STM32F2\
#        -I
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\ide\..\..\..\Source\third_party\fatfs\src\
#        -Ol) --dependencies=n
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\Source_15812263154798067462.dir\net.o.iar_deps
#    Locale            =  C
#    List file         =
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\Source_15812263154798067462.dir\net.lst
#    Object file       =
#        R:\STM32F205RC-Booter\Boot_MCU\Boot\obj\Source_15812263154798067462.dir\net.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#
###############################################################################

R:\STM32F205RC-Booter\Source\net.c
      1          /************************************************************************************//**
      2          * \file         Source/net.c
      3          * \brief        Bootloader TCP/IP network communication interface source file.
      4          * \ingroup      Core
      5          * \internal
      6          *----------------------------------------------------------------------------------------
      7          *                          C O P Y R I G H T
      8          *----------------------------------------------------------------------------------------
      9          *   Copyright (c) 2014  by Feaser    http://www.feaser.com    All rights reserved
     10          *
     11          *----------------------------------------------------------------------------------------
     12          *                            L I C E N S E
     13          *----------------------------------------------------------------------------------------
     14          * This file is part of OpenBLT. OpenBLT is free software: you can redistribute it and/or
     15          * modify it under the terms of the GNU General Public License as published by the Free
     16          * Software Foundation, either version 3 of the License, or (at your option) any later
     17          * version.
     18          *
     19          * OpenBLT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
     20          * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     21          * PURPOSE. See the GNU General Public License for more details.
     22          *
     23          * You have received a copy of the GNU General Public License along with OpenBLT. It
     24          * should be located in ".\Doc\license.html". If not, contact Feaser to obtain a copy.
     25          *
     26          * \endinternal
     27          ****************************************************************************************/
     28          
     29          /****************************************************************************************
     30          * Include files
     31          ****************************************************************************************/
     32          #include "boot.h"                                /* bootloader generic header          */
     33          #if (BOOT_COM_NET_ENABLE > 0)
     34          #include "netdev.h"
     35          #include "uip.h"
     36          #include "uip_arp.h"
     37          #endif
     38          
     39          
     40          #if (BOOT_COM_NET_ENABLE > 0)
     41          /****************************************************************************************
     42          * Configuration macros
     43          ****************************************************************************************/
     44          /* Extend the default time that the backdoor is open if firmware updates via TCP/IP
     45           * are supported. in this case an activation of the bootloader results in an
     46           * initialization of the ethernet MAC. when connected to the network via a router this
     47           * can take several seconds. Feel free to shorten/lengthen this time for finetuning,
     48           * Note that adding this configuration macro to blt_conf.h overrides the value here.
     49           */
     50          #ifndef BOOT_COM_NET_BACKDOOR_EXTENSION_MS
     51          #define BOOT_COM_NET_BACKDOOR_EXTENSION_MS   (10000)
     52          #endif
     53          
     54          
     55          /****************************************************************************************
     56          * Macro definitions
     57          ****************************************************************************************/
     58          /** \brief Delta time for the uIP periodic timer. */
     59          #define NET_UIP_PERIODIC_TIMER_MS   (500)
     60          /** \brief Delta time for the uIP ARP timer. */
     61          #define NET_UIP_ARP_TIMER_MS        (10000)
     62          /** \brief Macro for accessing the Ethernet header information in the buffer */
     63          #define NET_UIP_HEADER_BUF          ((struct uip_eth_hdr *)&uip_buf[0])
     64          
     65          
     66          /****************************************************************************************
     67          * Function prototypes
     68          ****************************************************************************************/
     69          static void NetServerTask(void);
     70          
     71          
     72          /****************************************************************************************
     73          * Local data declarations
     74          ****************************************************************************************/
     75          /** \brief Holds the time out value of the uIP periodic timer. */
     76          static blt_int32u periodicTimerTimeOut;
     77          /** \brief Holds the time out value of the uIP ARP timer. */
     78          static blt_int32u ARPTimerTimeOut;
     79          #if (BOOT_COM_NET_DHCP_ENABLE > 0)
     80          /** \brief Holds the MAC address which is used by the DHCP client. */
     81          static struct uip_eth_addr macAddress;
     82          #endif
     83          /** \brief Boolean flag to determine if the module was initialized or not. */
     84          static blt_bool netInitializedFlag = BLT_FALSE;
     85          #if (BOOT_COM_NET_DEFERRED_INIT_ENABLE == 1)
     86          /** \brief Boolean flag initialized such that the normal initialization via NetInit()
     87           *         should be deferred. A called to NetDeferredInit() is need to do the actual
     88           *         initialization of this module.
     89           */
     90          static blt_bool netInitializationDeferred = BLT_TRUE;
     91          #else
     92          /** \brief Boolean flag initialized such that the normal initialization via NetInit()
     93           *         proceeds as usual.
     94           */
     95          static blt_bool netInitializationDeferred = BLT_FALSE;
     96          #endif
     97          
     98          
     99          /************************************************************************************//**
    100          ** \brief     Initializes the TCP/IP network communication interface.
    101          ** \return    none.
    102          **
    103          ****************************************************************************************/
    104          void NetInit(void)
    105          {
    106            uip_ipaddr_t ipaddr;
    107          
    108            /* only perform the initialization if there is no request to defer it */
    109            if (netInitializationDeferred == BLT_FALSE)
    110            {
    111              /* initialize the network device */
    112              netdev_init();
    113              /* initialize the timer variables */
    114              periodicTimerTimeOut = TimerGet() + NET_UIP_PERIODIC_TIMER_MS;
    115              ARPTimerTimeOut = TimerGet() + NET_UIP_ARP_TIMER_MS;
    116              /* initialize the uIP TCP/IP stack. */
    117              uip_init();
    118          #if (BOOT_COM_NET_DHCP_ENABLE == 0)
    119              /* set the IP address */
    120              uip_ipaddr(ipaddr, BOOT_COM_NET_IPADDR0, BOOT_COM_NET_IPADDR1, BOOT_COM_NET_IPADDR2,
    121                         BOOT_COM_NET_IPADDR3);
    122              uip_sethostaddr(ipaddr);
    123              /* set the network mask */
    124              uip_ipaddr(ipaddr, BOOT_COM_NET_NETMASK0, BOOT_COM_NET_NETMASK1, BOOT_COM_NET_NETMASK2,
    125                         BOOT_COM_NET_NETMASK3);
    126              uip_setnetmask(ipaddr);
    127              /* set the gateway address */
    128              uip_ipaddr(ipaddr, BOOT_COM_NET_GATEWAY0, BOOT_COM_NET_GATEWAY1, BOOT_COM_NET_GATEWAY2,
    129                         BOOT_COM_NET_GATEWAY3);
    130              uip_setdraddr(ipaddr);
    131          #else
    132              /* set the IP address */
    133              uip_ipaddr(ipaddr, 0, 0, 0, 0);
    134              uip_sethostaddr(ipaddr);
    135              /* set the network mask */
    136              uip_ipaddr(ipaddr, 0, 0, 0, 0);
    137              uip_setnetmask(ipaddr);
    138              /* set the gateway address */
    139              uip_ipaddr(ipaddr, 0, 0, 0, 0);
    140              uip_setdraddr(ipaddr);
    141          #endif
    142              /* start listening on the configured port for XCP transfers on TCP/IP */
    143              uip_listen(HTONS(BOOT_COM_NET_PORT));
    144              /* initialize the MAC and set the MAC address */
    145              netdev_init_mac();
    146          
    147          #if (BOOT_COM_NET_DHCP_ENABLE > 0)
    148              /* initialize the DHCP client application and send the initial request. */
    149              netdev_get_mac(&macAddress.addr[0]);
    150              dhcpc_init(&macAddress.addr[0], 6);
    151              dhcpc_request();
    152          #endif
    153          
    154              /* extend the time that the backdoor is open in case the default timed backdoor
    155               * mechanism is used.
    156               */
    157            #if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
    158              if (BackDoorGetExtension() < BOOT_COM_NET_BACKDOOR_EXTENSION_MS)
    159              {
    160                BackDoorSetExtension(BOOT_COM_NET_BACKDOOR_EXTENSION_MS);
    161              }
    162            #endif /* BOOT_BACKDOOR_HOOKS_ENABLE == 0 */
    163              /* set flag to indicate that we are now initialized. */
    164              netInitializedFlag = BLT_TRUE;
    165            }
    166          } /*** end of NetInit ***/
    167          
    168          
    169          #if (BOOT_COM_NET_DEFERRED_INIT_ENABLE == 1)
    170          /************************************************************************************//**
    171          ** \brief     Performs a deferred initialization of the TCP/IP network communication
    172          **            interface.
    173          ** \return    none.
    174          **
    175          ****************************************************************************************/
    176          void NetDeferredInit(void)
    177          {
    178            /* reset the request to defer the initializaton */
    179            netInitializationDeferred = BLT_FALSE;
    180            /* perform the initialization if not yet initialized */
    181            if (netInitializedFlag == BLT_FALSE)
    182            {
    183              NetInit();
    184            }
    185          } /*** end of NetDeferredInit ***/
    186          #endif
    187          
    188          
    189          /************************************************************************************//**
    190          ** \brief     Transmits a packet formatted for the communication interface.
    191          ** \param     data Pointer to byte array with data that it to be transmitted.
    192          ** \param     len  Number of bytes that are to be transmitted.
    193          ** \return    none.
    194          **
    195          ****************************************************************************************/
    196          void NetTransmitPacket(blt_int8u *data, blt_int8u len)
    197          {
    198            uip_tcp_appstate_t *s;
    199            blt_int16u cnt;
    200          
    201            /* no need to send the packet if this module is not initialized */
    202            if (netInitializedFlag == BLT_TRUE)
    203            {
    204              /* get pointer to application state */
    205              s = &(uip_conn->appstate);
    206          
    207              /* add the dto counter first */
    208              *(blt_int32u *)&(s->dto_data[0]) = s->dto_counter;
    209              /* copy the actual XCP response */
    210              for (cnt=0; cnt<len; cnt++)
    211              {
    212                s->dto_data[cnt+4] = data[cnt];
    213              }
    214              /* set the length of the TCP/IP packet */
    215              s->dto_len = len + 4;
    216              /* set the flag to request the transmission of this packet. */
    217              s->dto_tx_req = BLT_TRUE;
    218              /* update dto counter for the next transmission */
    219              s->dto_counter++;
    220            }
    221          } /*** end of NetTransmitPacket ***/
    222          
    223          
    224          /************************************************************************************//**
    225          ** \brief     Receives a communication interface packet if one is present.
    226          ** \param     data Pointer to byte array where the data is to be stored.
    227          ** \param     len Pointer where the length of the packet is to be stored.
    228          ** \return    BLT_TRUE if a packet was received, BLT_FALSE otherwise.
    229          **
    230          ****************************************************************************************/
    231          blt_bool NetReceivePacket(blt_int8u *data, blt_int8u *len)
    232          {
    233            /* no need to check for newly received packets if this module is not initialized */
    234            if (netInitializedFlag == BLT_TRUE)
    235            {
    236              /* run the TCP/IP server task function, which will handle the reception and
    237               * transmission of XCP packets
    238               */
    239              NetServerTask();
    240            }
    241            /* packet reception and transmission is completely handled by the NetServerTask so
    242             * always return BLT_FALSE here.
    243             */
    244            return BLT_FALSE;
    245          } /*** end of NetReceivePacket ***/
    246          
    247          
    248          /************************************************************************************//**
    249          ** \brief     The uIP network application that implements XCP on TCP/IP. Note that this
    250          **            application make use of the fact that XCP is request/response based. So
    251          **            no new request will come in when a response is pending for transmission,
    252          **            if so, the transmission of the pending response is aborted.
    253          ** \return    none.
    254          **
    255          ****************************************************************************************/
    256          void NetApp(void)
    257          {
    258            uip_tcp_appstate_t *s;
    259            blt_int8u *newDataPtr;
    260          
    261            /* get pointer to application state */
    262            s = &(uip_conn->appstate);
    263          
    264            if (uip_connected())
    265            {
    266              /* init the dto counter and reset the pending dto data length and transmit related
    267               * flags.
    268               */
    269              s->dto_counter = 1;
    270              s->dto_len = 0;
    271              s->dto_tx_req = BLT_FALSE;
    272              s->dto_tx_pending = BLT_FALSE;
    273              return;
    274            }
    275          
    276            if (uip_acked())
    277            {
    278              /* dto sent so reset the pending flag. */
    279              s->dto_tx_pending = BLT_FALSE;
    280            }
    281          
    282            if (uip_rexmit())
    283            {
    284              /* is a dto transmission pending that should now be retransmitted? */
    285              /* retransmit the currently pending dto response */
    286              if (s->dto_tx_pending == BLT_TRUE)
    287              {
    288                /* resend the last pending dto response */
    289                uip_send(s->dto_data, s->dto_len);
    290              }
    291            }
    292          
    293            if (uip_poll())
    294            {
    295              /* check if there is a packet waiting to be transmitted. this is done via polling
    296               * because then it is possible to asynchronously send data. otherwise data is
    297               * only really send after a newly received packet was received.
    298               */
    299              if (s->dto_tx_req == BLT_TRUE)
    300              {
    301                /* reset the transmit request flag. */
    302                s->dto_tx_req = BLT_FALSE;
    303                if (s->dto_len > 0)
    304                {
    305                  /* set the transmit pending flag. */
    306                  s->dto_tx_pending = BLT_TRUE;
    307                  /* submit the data for transmission. */
    308                  uip_send(s->dto_data, s->dto_len);
    309                }
    310              }
    311            }
    312          
    313            if (uip_newdata())
    314            {
    315              /* only process the data if its length is not longer than expected. otherwise just
    316               * ignore it. XCP is request/response. this means that a new requests should
    317               * only be processed when the response the the previous request was sent. new
    318               * requests before the last response was sent can therefore also be ignored.
    319               */
    320              if ( ((uip_datalen() - 4) <= BOOT_COM_NET_RX_MAX_DATA) &&
    321                   (s->dto_tx_pending == BLT_FALSE) )
    322              {
    323                /* the first 4 bytes contain a counter value in which we are not really interested */
    324                newDataPtr = uip_appdata;
    325                XcpPacketReceived(&newDataPtr[4], (blt_int8u)(uip_datalen() - 4));
    326              }
    327            }
    328          } /*** end of NetApp ***/
    329          
    330          
    331          /************************************************************************************//**
    332          ** \brief     Runs the TCP/IP server task.
    333          ** \return    none.
    334          **
    335          ****************************************************************************************/
    336          static void NetServerTask(void)
    337          {
    338            blt_int32u connection;
    339            blt_int32u packetLen;
    340          
    341            /* check for an RX packet and read it. */
    342            packetLen = netdev_read();
    343            if (packetLen > 0)
    344            {
    345              /* set uip_len for uIP stack usage */
    346              uip_len = (blt_int16u)packetLen;
    347          
    348              /* process incoming IP packets here. */
    349              if (NET_UIP_HEADER_BUF->type == htons(UIP_ETHTYPE_IP))
    350              {
    351                uip_arp_ipin();
    352                uip_input();
    353                /* if the above function invocation resulted in data that
    354                 * should be sent out on the network, the global variable
    355                 * uip_len is set to a value > 0.
    356                 */
    357                if (uip_len > 0)
    358                {
    359                  uip_arp_out();
    360                  netdev_send();
    361                  uip_len = 0;
    362                }
    363              }
    364              /* process incoming ARP packets here. */
    365              else if (NET_UIP_HEADER_BUF->type == htons(UIP_ETHTYPE_ARP))
    366              {
    367                uip_arp_arpin();
    368          
    369                /* if the above function invocation resulted in data that
    370                 * should be sent out on the network, the global variable
    371                 * uip_len is set to a value > 0.
    372                 */
    373                if (uip_len > 0)
    374                {
    375                  netdev_send();
    376                  uip_len = 0;
    377                }
    378              }
    379            }
    380          
    381            /* process TCP/IP Periodic Timer here. */
    382            if (TimerGet() >= periodicTimerTimeOut)
    383            {
    384              periodicTimerTimeOut += NET_UIP_PERIODIC_TIMER_MS;
    385              for (connection = 0; connection < UIP_CONNS; connection++)
    386              {
    387                uip_periodic(connection);
    388                /* If the above function invocation resulted in data that
    389                 * should be sent out on the network, the global variable
    390                 * uip_len is set to a value > 0.
    391                 */
    392                if (uip_len > 0)
    393                {
    394                  uip_arp_out();
    395                  netdev_send();
    396                  uip_len = 0;
    397                }
    398              }
    399          
    400          #if UIP_UDP
    401              for (connection = 0; connection < UIP_UDP_CONNS; connection++)
    402              {
    403                uip_udp_periodic(connection);
    404                /* If the above function invocation resulted in data that
    405                 * should be sent out on the network, the global variable
    406                 * uip_len is set to a value > 0.
    407                 */
    408                if(uip_len > 0)
    409                {
    410                  uip_arp_out();
    411                  netdev_send();
    412                  uip_len = 0;
    413                }
    414              }
    415          #endif
    416            }
    417          
    418            /* process ARP Timer here. */
    419            if (TimerGet() >= ARPTimerTimeOut)
    420            {
    421              ARPTimerTimeOut += NET_UIP_ARP_TIMER_MS;
    422              uip_arp_timer();
    423            }
    424          
    425            /* perform polling operations here. */
    426            for (connection = 0; connection < UIP_CONNS; connection++)
    427            {
    428              uip_poll_conn(&uip_conns[connection]);
    429              /* If the above function invocation resulted in data that
    430               * should be sent out on the network, the global variable
    431               * uip_len is set to a value > 0.
    432               */
    433              if (uip_len > 0)
    434              {
    435                uip_arp_out();
    436                netdev_send();
    437                uip_len = 0;
    438              }
    439            }
    440          
    441          } /*** end of NetServerTask ***/
    442          
    443          #endif /* BOOT_COM_NET_ENABLE > 0 */
    444          
    445          
    446          /*********************************** end of net.c **************************************/


 
 
 0 bytes of memory

Errors: none
Warnings: none
